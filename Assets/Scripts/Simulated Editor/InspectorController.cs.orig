
using System.Collections;
using System.Collections.Generic;
using Unity.VisualScripting;
using UnityEngine;
using UnityEngine.UIElements;

public class InspectorController : MonoBehaviour
{
    private static InspectorController _instance;
    public static InspectorController Instance { get { return _instance; } }

    public UIDocument mainUIDocument;

    public VisualTreeAsset componentTemplate;

    public Color trueColor;
    public Color falseColor;
    public AnimationCurve flashCurve;

    public FollowCamera followCamera;
    public float cameraShiftAmount;
    public float shiftDistance;

    private VisualElement root;
    private Button xButton;
    private Label objectName, objectTag;

    public Material highlightMaterial;
    public Material defaultMaterial;

    public SimulatedObject displayedObject;

    private Sprite globalSpriteDefault, globalSprite1;
    private List<VisualElement> componentDisplays = new();
    private Dictionary<Toggle, SimulatedComponent> componentToggleBindings;
    private UIDocument currentDisplay;
    private Renderer targetRenderer;

    public bool objectHasBeenClicked;
    public bool isDisplaying;


    private void Awake()
    {
        GameManager.Instance.OnPlayerHurt.AddListener(StopDisplaying);

        if (_instance == null)
        {
            _instance = this;
        }
        else
        {
            Destroy(_instance.gameObject);
            _instance = this;
        }
    }

    private void Start()
    {
        StopDisplaying();
    }
    
    private void OnEnable() // get ui references B-)
    {
        root = mainUIDocument.rootVisualElement;
        objectName = root.Q<Label>("Object_name");
        objectTag = root.Q<Label>("Tag");
        xButton = root.Q<Button>("x_button");
        xButton.clickable.clicked += () =>
        {
            StopDisplaying();
        };
    }

<<<<<<< HEAD
    void Start()
    {
        //InputManager.Instance.OnClick.AddListener(OnClick);
        StopDisplaying();
    }

    public void StopDisplaying()
    {
        try
        {
            targetRenderer.material = defaultMaterial;
        }
        catch
        {
            Debug.Log("there is no target renderer");
        }

        
=======
    public void StopDisplaying()
    {
        if (displayedObject != null)
        {
            if (displayedObject.TryGetComponent<Renderer>(out targetRenderer)) targetRenderer.material = defaultMaterial;
            displayedObject = null;
        }

>>>>>>> erm
        if (root != null)
        {
            root.visible = false;
        }
        followCamera.shift = 0;
    }

    public void RefreshDisplay()
    {
        if (!displayedObject) return;
        DisplayObject(displayedObject);
    }

    void Update()
    {
        if (root.visible == false)
        {
            return;
        }

        if(Input.GetKeyDown(KeyCode.Mouse1))
        {
            Debug.Log("mouse clicked");
            root.style.visibility = Visibility.Hidden;
            targetRenderer.material = defaultMaterial;
        }

        foreach (KeyValuePair<Toggle, SimulatedComponent> kvp in componentToggleBindings)
        {
            Toggle toggle = kvp.Key;
            SimulatedComponent component = kvp.Value;
            component.SetComponentEnabledStatus(toggle.value);
        }
    }

    public void DisplayObject(SimulatedObject objectToDisplay)
    {
<<<<<<< HEAD
        objectHasBeenClicked = true;
        Debug.Log("1");
=======
>>>>>>> erm
        // Clear old elements
        while (componentDisplays.Count > 0)
        {
            VisualElement element = componentDisplays[0];
            root.Q<VisualElement>("components").Remove(element);
            componentDisplays.Remove(element);
        }

        //Clear old bindings
        componentToggleBindings = new();



        componentDisplays = new List<VisualElement>();
        List<SimulatedComponent> components = objectToDisplay.Components;

        targetRenderer = objectToDisplay.GetComponent<Renderer>();
        targetRenderer.material = highlightMaterial;

        // Display the components
        foreach (SimulatedComponent component in components)
        {
            VisualElement componentDisplay = component.GetComponentDisplay(component, componentTemplate);
            AddComponentToggle(component, componentDisplay);
            componentDisplays.Add(componentDisplay);
            root.Q<VisualElement>("components").Add(componentDisplay);
        }

        //SET OBJ NAME & TAG
        objectName.text = objectToDisplay.gameObject.name.ToString();
        objectTag.text = objectToDisplay.gameObject.tag.ToString();

        //Show the inspector
        root.visible = true;
        if (followCamera.controlledCamera.WorldToScreenPoint(objectToDisplay.transform.position).x > shiftDistance)
            followCamera.shift = cameraShiftAmount;

        this.displayedObject = objectToDisplay;
    }

    private void AddComponentToggle(SimulatedComponent component, VisualElement componentDisplay)
    {
        Toggle toggle = componentDisplay.Q<Toggle>("toggle");

        // Not all components are toggleable
        if (component.IsComponentToggleable && toggle is not null)
        {
            toggle.value = component.ComponentEnabledStatus;
            componentToggleBindings.Add(toggle, component);
        }
        else if (toggle is not null)
        {
            toggle.style.opacity = 0;
        }
    }

    private void Display(UIDocument displayedUI)
    {
        if (currentDisplay)
        {
            currentDisplay.rootVisualElement.visible = false;
        }

        currentDisplay = displayedUI;
        if (displayedUI)
        {
            displayedUI.rootVisualElement.visible = true;
        }
    }

    /*public void OnClick()
    {
        Debug.Log("onclickcalled");
        //wait a moment
        Invoke("CheckNothingClicked", 0);
    }

    private void CheckNothingClicked()
    {
        Debug.Log("checking nothing clicked");

        if (objectHasBeenClicked == false)
        {
            Debug.Log("close display");
            StopDisplaying();
        }
        else
        {
            Debug.Log("keep display");
        }
        objectHasBeenClicked = false;
    }
    */
}
